{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pr\u00e1ctica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de servidor Nginx.","text":""},{"location":"#instalacion-servidor-web-nginx","title":"Instalaci\u00f3n servidor web Nginx.","text":"<p>El primer paso a seguir en esta pr\u00e1ctica, es la instalaci\u00f3n de nginx en nuestra m\u00e1quina Debian. Para ello primero deberemos actualizar los repositorios con el comando:  </p> <p></p> <p>Y luego instalaremos el paquete de Nginx. </p> <pre><code>sudo apt install nginx\n</code></pre> <p>Si queremos comprobar que se ha instalado correctamente, ejecutaremos el siguiente comando:</p> <p></p>"},{"location":"#creacion-de-la-carpeta-del-sitio-web","title":"Creaci\u00f3n de la carpeta del sitio web.","text":"<p>Todos los archivos que formar\u00e1n parte de un sitio web se organizar\u00e1n en carpetas. Estas suelen estar en /var/www. Por ello crearemos la carpeta con el nombre de nuestro sitio web; </p> <p></p> <p>Una vez creada la carpeta, deberemos clonar este repositorio de github dentro de la misma ;  https://github.com/cloudacademy/static-website-example</p> <p>Es necesario que si no teneis instalado git en vuestra m\u00e1quina que lo instaleis con el siguiente comando: </p> <p></p> <p>Y para la clonaci\u00f3n usar\u00e1s el siguiente: </p> <p></p> <p>Ahora, pondremos a www-data como propietario de esta carpeta y de todo lo que haya dentro. </p> <p></p> <p>Le daremos los permisos necesarios para evitar errores de acceso al entrar en el sitio web: </p> <p></p> <p>Para comprobar que todo funciona, podemos acceder desde nuestro cliente al servidor. Primero obtendremos la ip con el siguiente comando; </p> <p></p> <p>Solo queda introducirlo en el navegador y si todo va bien tendremos el siguiente resultado.</p> <p></p>"},{"location":"#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web NGINX.","text":"<p>En Nginx hay dos rutas importantes. Una de ellas es sites-available, esta carpeta contiene los archivos de configuraci\u00f3n de cada uno de los sitios web que alberga el servidor, la otra es sites-enabled, contiene los archivos de configuraci\u00f3n de los sitios habilitados, los que funcionan en ese momento. </p> <p>EN sites-available hay un archivo default que es la p\u00e1gina que muestra si entramos al servidor sin ning\u00fan sitio web. Para que nginx muestre el contenido de nuestra web, necesitaremos crear un bloque de servidor con las directivas correctas. Para ello crearemos un archivo nuevo en /etc/nginx/sites-available/nuestro-dominio: </p> <p></p> <p>Y lo modificaremos de la siguiente forma: </p> <p></p> <p>Ruta del index ; </p> <p></p> <p>Entre el index y los archivos, crearemos un archivo simb\u00f3lico de los sitios que est\u00e1n habilitados, para que se de de alta autom\u00e1ticamente.</p> <p></p> <p>Reiniciaremos el servidor para aplicar todos los cambios hechos: </p> <p></p>"},{"location":"#comprobaciones","title":"Comprobaciones.","text":"<p>Al no poseer servidor DNS que traduzca los nombres a IPs, debemos hacerlo manualmente. Editaremos el archivo /etc/hosts de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual a nuestro nombre del servidor.  Este archivo en Windows se encuentra en el siguiente directorio :  C:\\Windows\\System32\\drivers\\etc\\hosts : </p> <p></p> <p>Si queremos comprobar las peticiones, podemos hacerlo gracias a un archivo situado en /var/log/nginx/acces.log. Este como el ejemplo nos muestra, registra todas las peticiones. </p> <p></p>"},{"location":"#configurar-servidor-sftp-en-debian","title":"Configurar servidor SFTP en Debian.","text":"<p>Para transferir archivos de nuestra m\u00e1quina local a nuestra m\u00e1quina virtual, aunque hay m\u00e9todos mejores y m\u00e1s modernos, en este caso utilizaremos ftp/sftp. Es un protocolo de transferencia de archivos entre sistemas conectados a una red TCP. La diferencia entre estos, esque debido a la inseguridad de FTP, se le a\u00f1adi\u00f3 una capa SSH para hacer SFTP y darle m\u00e1s seguridad.  En primer lugar instalaremos desde los repositorios: </p> <p></p> <p></p> <p>Crearemos una carpeta en nuestro home en debian. </p> <p></p> <p>Iremos a la configuraci\u00f3n vsftpd, le indicaremos que este ser\u00e1 el directorio al cual vsftpd se cambie despu\u00e9s de conectarse el usuario.  Ahora crearemos los certificados de seguridad necesarios para aportar la capa de cifrado a nuestra conexi\u00f3n. </p> <p></p> <p>Una vez terminado, cambiamos la configuraci\u00f3n de vsftpd con el editor de textos. </p> <p></p> <p>Bucaremos las siguientes l\u00edneas; </p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p>Y las sustituiremos por estas. </p> <p></p> <p>Tras guardar la configuraci\u00f3n, reiniciaremos el servicio. </p> <p></p>"},{"location":"#cliente-sftp","title":"Cliente SFTP","text":"<p>Link descarga : https://filezilla-project.org/download.php?type=client</p> <p>Utilizaremos SFTP por su seguridad,  Indicaremos la ip del servidor, el nombre de usuario, contrase\u00f1a y el puerto 22, no el 21 en el caso de la captura. </p> <p></p> <p>Aceptamos el certificado desconocido, ya que al ser nuestro servidor no hay peligro. </p> <p></p> <p>Tras esto comprobaremos que la conexi\u00f3n se ha realizado con \u00e9xito. </p> <p></p> <p>Probaremos a subir un archivo desde nuestra m\u00e1quina local a la virtual. Comprobando que ha sido satisfactoria. </p> <p></p> <p></p>"},{"location":"#https","title":"HTTPS","text":"<p>En este apartado, a\u00f1adiremos a nuestro servidor una capa de seguridad. Haremos que todos nuestros sitios web alojados hagan uso de los certificados SSL y se acceda a ellos por medio de HTTPS.</p> <p>Para ello, necesitaremos generar unos certificados autofirados, y cambiar los parametros necesarios en el fichero de configuraci\u00f3n de nuestros host virtuales. </p> <p>Como primer paso, instalaremos OpenSSL mediante los siguientes comandos; </p> <p></p> <p>Crearemos el certificado SSL autofirmado. Explicaci\u00f3n de comando; </p> <pre><code>- x509 : Indica que se crear\u00e1 un certificado autofirmado \n- nodes : No se cifrar\u00e1 la clave privada con una contrase\u00f1a\n- days 365 : Ser\u00e1 v\u00e1lido por 365 d\u00edas \n- newkey rsa:2048 Crear\u00e1 una clave RSA de 2048 bits\n- keyout servidor.key : Especifica el archivo donde se guardar\u00e1 la clave privada. \n- out servidor.crt :  Especifica el archivo donde se guardar\u00e1 el certificado.\n</code></pre> <p></p> <p>Editaremos el archivo del sitio web en Nginx: </p> <pre><code>$sudo nano /etc/nginx/sites-available/tu_servidor.com\n</code></pre> <p>Configuraremos el bloque de servidor para HTTPS: A\u00f1adiremos un bloque de servidor para el puerto 443 (HTTPS). Tambi\u00e9n a\u00f1adiremos un bloque para redireccionar HTTP a HTTPS para que redirigir las solicitudes HTTP al puerto 443. </p> <p></p> <p>En caso de que no lo hayas hecho, debemos habilitar el sitio web con el siguiente comando:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/tu_servidor.com /etc/nginx/sites-enabled/\n</code></pre> <p>Y por ultimo, para comprobar la configuraci\u00f3n de Nginx ejecuta el siguiente comando: </p> <p></p>"},{"location":"#resultado","title":"Resultado","text":"<p>Si todo ha salido bien, al buscar tu dominio en el navegador debe darte esta salida: </p> <p></p>"},{"location":"#cuestiones-finales","title":"Cuestiones finales","text":"<ol> <li>\u00bfQue pasa si no hago el link simb\u00f3lico entre sites-available y sites-enabled de mi sitio web?</li> </ol> <p>Si no hacemos el enlace simb\u00f3lico, nginx no activar\u00e1 la configuraci\u00f3n del sitio web. Sites-avaliable solamente guarda los archivos, nginx, usa las configuraciones que est\u00e1n en sites-enabled.</p> <ol> <li>\u00bfQu\u00e9 pasa si no le doy los permisos adecuados a /var/www/nombre_web?</li> </ol> <p>Que no se podr\u00e1 acceder desde ning\u00fan servidor a los archivos del sitio.</p>"}]}